"use strict";
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var _ChildReporter_ipc, _ChildReporter_onConnected;
Object.defineProperty(exports, "__esModule", { value: true });
const ipc_client_1 = __importDefault(require("./ipc-client"));
const wrap_io_1 = __importDefault(require("./wrap-io"));
class ChildReporter {
    constructor() {
        _ChildReporter_ipc.set(this, void 0);
        _ChildReporter_onConnected.set(this, void 0);
        __classPrivateFieldSet(this, _ChildReporter_ipc, new ipc_client_1.default('reporter'), "f");
        __classPrivateFieldSet(this, _ChildReporter_onConnected, __classPrivateFieldGet(this, _ChildReporter_ipc, "f").connect(), "f");
        (0, wrap_io_1.default)(__classPrivateFieldGet(this, _ChildReporter_ipc, "f"));
    }
    getLastError() {
        return undefined;
    }
    onTestResult(test, testResult, aggregatedResult) {
        __classPrivateFieldGet(this, _ChildReporter_ipc, "f").emit('testResult', {
            test,
            testResult,
            aggregatedResult,
        });
    }
    onTestFileResult(test, testResult, aggregatedResult) {
        __classPrivateFieldGet(this, _ChildReporter_ipc, "f").emit('testFileResult', {
            test,
            testResult,
            aggregatedResult,
        });
    }
    onTestCaseResult(test, testCaseResult) {
        __classPrivateFieldGet(this, _ChildReporter_ipc, "f").emit('testCaseResult', {
            test,
            testCaseResult,
        });
    }
    onRunStart(aggregatedResult, options) {
        __classPrivateFieldGet(this, _ChildReporter_ipc, "f").emit('runStart', {
            aggregatedResult,
            options,
        });
    }
    onTestStart(test) {
        __classPrivateFieldGet(this, _ChildReporter_ipc, "f").emit('testStart', { test });
    }
    onTestFileStart(test) {
        __classPrivateFieldGet(this, _ChildReporter_ipc, "f").emit('testFileStart', { test });
    }
    async onRunComplete(contexts, results) {
        __classPrivateFieldGet(this, _ChildReporter_ipc, "f").emit('runComplete', { contexts, results });
        await __classPrivateFieldGet(this, _ChildReporter_onConnected, "f");
        await __classPrivateFieldGet(this, _ChildReporter_ipc, "f").disconnect();
    }
}
exports.default = ChildReporter;
_ChildReporter_ipc = new WeakMap(), _ChildReporter_onConnected = new WeakMap();
