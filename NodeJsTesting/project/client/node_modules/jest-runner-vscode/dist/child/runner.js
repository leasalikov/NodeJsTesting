"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.run = void 0;
const core_1 = require("@jest/core");
const path_1 = __importDefault(require("path"));
const process_1 = __importDefault(require("process"));
const ipc_client_1 = __importDefault(require("./ipc-client"));
const vscodeTestEnvPath = require.resolve('./environment');
const vscodeModulePath = require.resolve('./vscode-module');
const moduleNameMapper = JSON.stringify({ '^vscode$': vscodeModulePath });
const jestCliPath = require.resolve('jest-cli');
// eslint-disable-next-line @typescript-eslint/no-var-requires, global-require
const { buildArgv } = require(path_1.default.join(jestCliPath, '../run'));
async function run() {
    const ipc = new ipc_client_1.default('child');
    const disconnected = new Promise(resolve => ipc.on('disconnect', resolve));
    try {
        const { PARENT_JEST_OPTIONS } = process_1.default.env;
        if (!PARENT_JEST_OPTIONS) {
            throw new Error('PARENT_JEST_OPTIONS is not defined');
        }
        const options = JSON.parse(PARENT_JEST_OPTIONS);
        const jestOptions = [
            ...options.args,
            '-i',
            '--colors',
            '--runner=jest-runner',
            `--env=${vscodeTestEnvPath}`,
            `--moduleNameMapper=${moduleNameMapper}`,
            `--reporters=${require.resolve('./reporter')}`,
            '--runTestsByPath',
            ...options.testPaths,
        ];
        const argv = await buildArgv(jestOptions);
        const projects = new Set([
            ...(argv.projects?.map(project => path_1.default.resolve(project)) || []),
            options.workspacePath,
        ]);
        await (0, core_1.runCLI)(argv, [...projects]);
    }
    catch (error) {
        console.log(error.stack || error.message || String(error));
        const errorObj = JSON.parse(JSON.stringify(error, Object.getOwnPropertyNames(error)));
        ipc.emit('error', errorObj);
    }
    await Promise.race([disconnected, ipc.disconnect()]);
}
exports.run = run;
