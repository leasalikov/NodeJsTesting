"use strict";
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var _MessageWriter_ipc, _MessageWriter_eventParser, _MessageWriter_channel;
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = __importDefault(require("path"));
const js_message_1 = __importDefault(require("js-message"));
// eslint-disable-next-line @typescript-eslint/no-var-requires, global-require
const EventParser = require(path_1.default.resolve(path_1.default.dirname(require.resolve('@achrinza/node-ipc')), 'entities/EventParser'));
class MessageWriter {
    constructor(ipc, channel) {
        _MessageWriter_ipc.set(this, void 0);
        _MessageWriter_eventParser.set(this, void 0);
        _MessageWriter_channel.set(this, void 0);
        __classPrivateFieldSet(this, _MessageWriter_ipc, ipc, "f");
        __classPrivateFieldSet(this, _MessageWriter_eventParser, new EventParser(__classPrivateFieldGet(this, _MessageWriter_ipc, "f").config), "f");
        __classPrivateFieldSet(this, _MessageWriter_channel, channel, "f");
    }
    write(type, data) {
        const { socket } = __classPrivateFieldGet(this, _MessageWriter_ipc, "f").of[__classPrivateFieldGet(this, _MessageWriter_channel, "f")];
        const message = new js_message_1.default();
        message.type = type;
        message.data = data;
        // Can't do this since it doesn't wait for the event to be sent:
        // this.#ipc.of[this.#ipcChannel].emit(method, param)
        return new Promise(res => {
            socket.write(__classPrivateFieldGet(this, _MessageWriter_eventParser, "f").format(message), () => res());
        });
    }
}
exports.default = MessageWriter;
_MessageWriter_ipc = new WeakMap(), _MessageWriter_eventParser = new WeakMap(), _MessageWriter_channel = new WeakMap();
