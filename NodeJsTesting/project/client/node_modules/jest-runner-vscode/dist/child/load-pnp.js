"use strict";
// without any non-internal dependencies, try to find the pnp module and load it
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const promises_1 = __importDefault(require("fs/promises"));
const module_1 = __importDefault(require("module"));
const path_1 = __importDefault(require("path"));
const process_1 = __importDefault(require("process"));
const vscode_1 = __importDefault(require("vscode"));
async function findPackageRoot(start) {
    let current = start;
    while (current) {
        try {
            const yarnLockPath = await promises_1.default.realpath(path_1.default.join(current, 'yarn.lock'));
            const stat = await promises_1.default.stat(yarnLockPath);
            if (stat.isFile()) {
                return current;
            }
        }
        catch {
            // ignore
        }
        const newPath = path_1.default.dirname(current);
        if (newPath === current) {
            break;
        }
        current = newPath;
    }
    return undefined;
}
async function findPnPLoader(dir) {
    for (const yarnPath of ['.pnp.cjs', '.pnp.js']) {
        try {
            const realPath = await promises_1.default.realpath(path_1.default.join(dir, yarnPath));
            const stat = await promises_1.default.stat(realPath);
            if (stat.isFile()) {
                return realPath;
            }
        }
        catch {
            // ignore
        }
    }
    return undefined;
}
async function loadPnP() {
    const { PARENT_CWD } = process_1.default.env;
    if (PARENT_CWD) {
        const root = await findPackageRoot(PARENT_CWD);
        if (root) {
            const loader = await findPnPLoader(root);
            if (loader) {
                try {
                    // eslint-disable-next-line global-require, @typescript-eslint/no-var-requires
                    ;
                    require(loader).setup();
                    const pnpifiedModule = module_1.default.Module;
                    const { _load } = pnpifiedModule;
                    pnpifiedModule._load = function (request) {
                        if (request === 'vscode') {
                            return vscode_1.default;
                        }
                        return _load.apply(this, 
                        // eslint-disable-next-line prefer-rest-params
                        arguments);
                    };
                }
                catch {
                    // ignore
                }
            }
        }
    }
}
exports.default = loadPnP;
